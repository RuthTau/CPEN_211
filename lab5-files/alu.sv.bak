`define add 2'b00
`define sub 2'b01
`define bwa 2'b10
`define bn  2'b11

module ALU(input [15:0] val_A, input [15:0] val_B, input [1:0] ALU_op, output reg [15:0] ALU_out, output reg Z);
 always_comb begin
 case(ALU_op) 
 `add: ALU_out = val_A + val_B;
 `sub: ALU_out = val_A - val_B;
 `bwa: ALU_out = val_A & val_B;
 `bn:  ALU_out = ~val_B;
default: ALU_out = val_A + val_B;
endcase

if(ALU_out == 16'd0)
begin Z = 1'b1;
end
else begin
	Z = 1'b0;
end

end 
endmodule: ALU
